let fonts = [];
let points = [];
let params = {
  color: '#0007FF',
  letterSpacing: 90,
  weight: 2,
  fontWidth: 1,
  fontHeight: 1,
  cornerRounding: 2,
  aperture: 0.5,
  descender: 10,
  strokeThickness: 1.3
};

let textString = "abcde";
let carrier; // Oscillator
let modulator; // Oscillator
let pointIndex = 0; // Tracks the current point in the loop

// We'll store the vertical bounding-box center here
let globalCenterY = 0;

function preload() {
  fonts.push(loadFont('ARIAL.TTF'));
  fonts.push(loadFont('times-new-roman.ttf'));
  fonts.push(loadFont('georgia.ttf'));
  fonts.push(loadFont('roboto.ttf'));
  fonts.push(loadFont('Helvetica.ttf'));
  fonts.push(loadFont('PTSerif-Regular.ttf'));
}

function setup() {
  createCanvas(windowWidth, windowHeight);
  textSize(200);
  
  carrier = new p5.Oscillator('sine');
  carrier.start();
  carrier.amp(0.); // Start silent
  modulator = new p5.Oscillator('sine');
  modulator.start();
  modulator.amp(1000); // Start silent
  
  modulator.disconnect();
  carrier.freq(modulator);
  
  // --- Your existing GUI code ---
  let gui = QuickSettings.create(10, 10, "typography purgatory");
  gui.addText("say something", textString, (val) => {
    textString = val || "abc"; 
    updatePoints();
  });
  gui.addRange("letter spacing", 50, 300, params.letterSpacing, 1, (val) => {
    params.letterSpacing = val;
    updatePoints();
  });
  gui.addRange("font height", 0.5, 2, params.fontHeight, 0.01, (val) => params.fontHeight = val);
  gui.addRange("swirl", -30, 30, params.cornerRounding, 0.1, (val) => params.cornerRounding = val);
  gui.addRange("aperture", 0, 1, params.aperture, 0.01, (val) => params.aperture = val);
  gui.addRange("descender", 0, 20, params.descender, 0.5, (val) => params.descender = val);
  gui.addRange("stroke thickness", 0.5, 5, params.strokeThickness, 0.1, (val) => params.strokeThickness = val);
  gui.addDropDown("font-family weight", ['none','times new roman', 'arial', 'georgia', 'pt serif'], 1);
  gui.addButton("i'm feeling lucky", 0.5, 5, params.strokeThickness, 0.1, (val) => params.strokeThickness = val);
  // --- End of GUI code ---

  updatePoints();
}

function updatePoints() {
  points = [];

  // We'll track min/max Y across all averaged points (for vertical centering)
  let yMin = Infinity, yMax = -Infinity;

  // Collect and average points for each letter
  for (let i = 0; i < textString.length; i++) {
    let letter = textString.charAt(i);
    let allLetterPoints = [];

    for (let font of fonts) {
      let fontPoints = font.textToPoints(
        letter,
        width / 4 + i * params.letterSpacing,  // << X offset uses your letterSpacing
        height / 2,                           // << baseline
        200,
        { sampleFactor: 0.2 }
      );
      allLetterPoints.push(fontPoints);
    }

    // Average the points across all fonts for this letter
    let avgLetterPoints = [];
    let maxPoints = Math.max(...allLetterPoints.map(fp => fp.length));

    for (let j = 0; j < maxPoints; j++) {
      let sumX = 0, sumY = 0, count = 0;
      for (let fontPoints of allLetterPoints) {
        if (fontPoints[j]) {
          sumX += fontPoints[j].x;
          sumY += fontPoints[j].y;
          count++;
        }
      }
      if (count > 0) {
        let avgX = sumX / count;
        let avgY = sumY / count;
        avgLetterPoints.push({ x: avgX, y: avgY });

        // Track global min/max of Y
        if (avgY < yMin) yMin = avgY;
        if (avgY > yMax) yMax = avgY;
      }
    }
    points.push(avgLetterPoints);
  }

  // Compute vertical bounding-box center
  globalCenterY = (yMin + yMax) / 2;
}

function draw() {
  background(255);
  stroke(0, 0, 255);
  strokeWeight(params.strokeThickness);
  noFill();

  push();
  translate(width / 10, height / 10);

  // Draw each letter with its averaged points
  for (let letterPoints of points) {
    beginShape();
    for (let p of letterPoints) {
      // Apply your swirl in the original coordinates
      let swirlX = p.x + sin(p.y * 0.05) * params.cornerRounding;
      let swirlY = p.y + cos(p.x * 0.05) * params.cornerRounding;

      // scale x around 0 to respect params.width
      let x = swirlX * params.fontWidth; 
      // This keeps letters centered vertically even if params.height changes.
      let y = globalCenterY + (swirlY - globalCenterY) * params.fontHeight;

      vertex(x, y);
    }
    endShape();
  }

  pop();
  
  
    let allPoints = points.flat(); // Flatten all letter points into a single array

  if (allPoints.length > 0) {
    let p = allPoints[pointIndex]; // Get the current point

    // Map point position to frequency and amplitude
    let freq1 = map(p.x, 0, width, 200, 1000); // Map X to frequency range (200Hz - 1000Hz)
    let freq2 = map(p.y, height, 0, 200, 1000);

    carrier.freq(freq1);
    modulator.freq(freq2);
    carrier.amp(0.5); // Smooth transition with 50ms ramp time

    // Move to next point
    pointIndex = (pointIndex + 1) % allPoints.length;
  }
  
}
